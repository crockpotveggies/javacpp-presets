package org.bytedeco.javacpp.presets;

import org.bytedeco.javacpp.annotation.*;
import org.bytedeco.javacpp.tools.*;

/**
 *
 * @author Justin Long (crockpotveggies)
 */
@Properties(names = {"macosx-x86_64"}, value = {
    @Platform(include = {
        // "<algs.h>",
        // "<any.h>",
        // "<array.h>",
        "<array2d.h>",
        "<assert.h>",
        "<base64.h>",
        // "<bayes_utils.h>",
        // "<bigint.h>",
        // "<binary_search_tree.h>",
        // "<bit_stream.h>",
        // "<bound_function_pointer.h>",
        // "<bridge.h>",
        // "<bsp.h>",
        // "<byte_orderer.h>",
        // "<clustering.h>",
        // "<cmd_line_parser.h>",
        "<compress_stream.h>",
        // "<conditioning_class.h>",
        // "<config.h>",
        // "<config_reader.h>",
        "<console_progress_indicator.h>",
        // "<control.h>",
        // "<cpp_pretty_printer.h>",
        // "<cpp_tokenizer.h>",
        // "<crc32.h>",
        // "<data_io.h>",
        // "<dir_nav.h>",
        // "<directed_graph.h>",
        // "<disjoint_subsets.h>",
        // "<dnn.h>",
        // "<enable_if.h>",
        // "<entropy_decoder.h>",
        // "<entropy_decoder_model.h>",
        // "<entropy_encoder.h>",
        // "<entropy_encoder_model.h>",
        "<error.h>",
        // "<filtering.h>",
        // "<float_details.h>",
        "<geometry.h>",
        // "<graph.h>",
        // "<graph_cuts.h>",
        // "<graph_utils.h>",
        // "<graph_utils_threaded.h>",
        "<gui_core.h>",
        "<gui_widgets.h>",
        "<hash.h>",
        "<hash_map.h>",
        "<hash_set.h>",
        "<hash_table.h>",
        "<image_io.h>",
        "<image_keypoint.h>",
        "<image_processing.h>",
        "<image_transforms.h>",
        "<iosockstream.h>",
        "<is_kind.h>",
        // "<linker.h>",
        // "<logger.h>",
        "<lsh.h>",
        // "<lz77_buffer.h>",
        // "<lzp_buffer.h>",
        // "<manifold_regularization.h>",
        // "<map.h>",
        "<matrix.h>",
        // "<md5.h>",
        // "<member_function_pointer.h>",
        // "<memory_manager.h>",
        // "<memory_manager_global.h>",
        // "<memory_manager_stateless.h>",
        // "<misc_api.h>",
        // "<mlp.h>",
        // "<noncopyable.h>",
        // "<numeric_constants.h>",
        // "<numerical_integration.h>",
        // "<opencv.h>",
        // "<optimization.h>",
        // "<pipe.h>",
        // "<pixel.h>",
        // "<platform.h>",
        // "<python.h>",
        // "<quantum_computing.h>",
        // "<queue.h>",
        "<rand.h>",
        // "<ref.h>",
        // "<reference_counter.h>",
        // "<revision.h>",
        // "<sequence.h>",
        // "<serialize.h>",
        // "<server.h>",
        // "<set.h>",
        // "<set_utils.h>",
        // "<simd.h>",
        // "<sliding_buffer.h>",
        // "<smart_pointers.h>",
        // "<smart_pointers_thread_safe.h>",
        // "<sockets.h>",
        // "<sockstreambuf.h>",
        // "<sort.h>",
        // "<sparse_vector.h>",
        // "<sqlite.h>",
        // "<stack.h>",
        // "<stack_trace.h>",
        // "<static_map.h>",
        // "<static_set.h>",
        "<statistics.h>",
        // "<std_allocator.h>",
        // "<stl_checked.h>",
        "<string/string.h>",
        // "<svm.h>",
        // "<svm_threaded.h>",
        // "<sync_extension.h>",
        // "<threads.h>",
        // "<time_this.h>",
        // "<timeout.h>",
        // "<timer.h>",
        // "<timing.h>",
        // "<tokenizer.h>",
        // "<tuple.h>",
        // "<type_safe_union.h>",
        // "<uintn.h>",
        // "<unicode.h>",
        "<unordered_pair.h>",
        "<vectorstream.h>",
        // "<windows_magic.h>",
        "<xml_parser.h>"
      },
      includepath = {"/usr/local/Cellar/dlib/19.1_2/include/", ""}, link = "dlib@.19.1", linkpath = "/usr/local/Cellar/dlib/19.1_2/lib/"),
    @Platform(value = "macosx-x86_64",  includepath =  "/usr/local/include/dlib/",
                                           linkpath = {"/usr/local/lib/libdlib.dylib"}) },
        target = "org.bytedeco.javacpp.dlib")
public class dlib implements InfoMapper {
    public void map(InfoMap infoMap) {
      infoMap.put(new Info(
          "error_type",
          "error",
          "gui_error",
          "socket_error",
          "thread_error",
          "cast_to_string_error",
          "string_cast_error",
          "EPORT_IN_USE",  
          "ETIMEOUT",     
          "ECONNECTION", 
          "ELISTENER", 
          "ERESOLVE",     
          "EMONITOR",   
          "ECREATE_THREAD",    
          "ECREATE_MUTEX",    
          "ECREATE_SIGNALER",
          "EUNSPECIFIED",   
          "EGENERAL_TYPE1",
          "EGENERAL_TYPE2",  
          "EGENERAL_TYPE3",  
          "EINVALID_OPTION",
          "ETOO_FEW_ARGS",
          "ETOO_MANY_ARGS",
          "ESOCKET",
          "ETHREAD",
          "EGUI",
          "EFATAL",
          "EBROKEN_ASSERT",
          "EIMAGE_LOAD",
          "EDIR_CREATE",
          "EINCOMPATIBLE_OPTIONS",
          "EMISSING_REQUIRED_OPTION",
          "EINVALID_OPTION_ARG",
          "EMULTIPLE_OCCURANCES",
          "ECONFIG_READER",
          "EIMAGE_SAVE",
          "ECAST_TO_STRING",
          "ESTRING_CAST",
          "EUTF8_TO_UTF32",
          "EOPTION_PARSE",
          "std"
        ).cppTypes().annotations())

        // .put(new Info("dlib::cast_to_string_error").pointerTypes("CastToStringError").purify(true))
        // .put(new Info("dlib::string_cast_error").pointerTypes("StringCastError").purify(true))

        .put(new Info("assert.h").linePatterns(".*__PRETTY_FUNCTION__.*").skip())
        .put(new Info("DLIB_ERROr").define(false))

        .put(new Info("std::string").annotations("@StdString").valueTypes("BytePointer", "String").pointerTypes("@Cast({\"char*\", \"std::string*\"}) BytePointer"));
        // .put(new Info("std::exception").annotations("@StdException").pointerTypes("@Cast({\"std::exception*\"}) Exception").base("Throwable").define());
    }
}